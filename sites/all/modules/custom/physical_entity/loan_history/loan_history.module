<?php

/**
 * Implements hook_menu
 */
function loan_history_menu() {
    $items['physical-entities/update-loan-history'] = array(
        'title' => 'Create A Physical Entity',
        'page callback' => 'loan_history_update',
        'access callback' => TRUE,
    );

    return $items;
}

/**
 * hook_menu() callback
 */
function loan_history_update() {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'loan_history')
        ->fieldCondition('field_repayment_date', 'value', date('Y-m-d', strtotime('Yesterday')), '=');

    $result = $query->execute();

    $loan_history = array();

    if (isset($result['node'])) {
        $loan_history = entity_load('node', array_keys($result['node']));
    }


    foreach($loan_history as $history) {
        $client_id = $history->field_physical_entity['und'][0]['target_id'];

        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'current_balance')
            ->fieldCondition('field_physical_entity', 'target_id', $client_id, '=');

        $result_balance = $query->execute();
        $current_balance = array();
        $cur_bal = 0;

        if (isset($result_balance['node'])) {
            $current_balance = current(entity_load('node', array_keys($result_balance['node'])));

        }

        if (!empty($current_balance)) {
            $cur_bal = $current_balance->field_current_balance['und'][0]['value'];
        }

        $node = node_load($history->nid);
        $balance_node = node_load($current_balance->nid);

        if ($cur_bal >= $history->field_total_amount['und'][0]['value']) {

            $node->field_actual_date['und'][0]['value'] = $history->field_repayment_date['und'][0]['value'];
            $node->field_actual_total_amount['und'][0]['value'] = $history->field_total_amount['und'][0]['value'];
            $node->field_actual_interest['und'][0]['value'] = $history->field_interest_accrued['und'][0]['value'];
            $node->field_actual_principal['und'][0]['value'] = $history->field_principal['und'][0]['value'];

            $balance_node->field_current_balance['und'][0]['value'] -= $node->field_actual_total_amount['und'][0]['value'];

        }else if ($cur_bal > 0) {

            $node->field_actual_date['und'][0]['value'] = $history->field_repayment_date['und'][0]['value'];

//            if (!empty($node->field_overdue_accrued) &&
//                $node->field_overdue_accrued['und'][0]['value'] > 0 &&
//                $cur_bal >= $node->field_overdue_accrued['und'][0]['value']) {
//                $node->field_overdue_paid['und'][0]['value'] = $node->field_overdue_accrued['und'][0]['value'];
//            }else {
//                $node->field_overdue_paid['und'][0]['value'] = $cur_bal;
//            }

            if ($cur_bal >= $node->field_interest_accrued['und'][0]['value']) {
                $node->field_actual_interest['und'][0]['value'] = $node->field_interest_accrued['und'][0]['value'];
            }else {
                $node->field_actual_interest['und'][0]['value'] = $cur_bal;
            }

            $cur_bal -= $node->field_actual_interest['und'][0]['value'];


            if ($cur_bal >= $node->field_principal['und'][0]['value']) {
                $node->field_actual_principal['und'][0]['value'] = $node->field_principal['und'][0]['value'];
            }else {
                $node->field_actual_principal['und'][0]['value'] = $cur_bal;
            }

            $cur_bal = 0;


            $node->field_actual_total_amount['und'][0]['value'] =
                $node->field_actual_interest['und'][0]['value'] +
                $node->field_actual_principal['und'][0]['value'];


            $balance_node->field_current_balance['und'][0]['value'] = $cur_bal;

        }

        $node->field_overdue_accrued['und'][0]['value'] = $node->field_total_amount['und'][0]['value']  -
        $node->field_actual_total_amount['und'][0]['value'];

        if ($node->field_overdue_accrued['und'][0]['value'] > 0) {
            $node->field_overdue_days['und'][0]['value'] = 1;
        }

        field_attach_update('node', $node);
        field_attach_update('node', $balance_node);

    }

}

/**
 * select sum(amount) from actual_deposits where date <= today-1 and client_id
 * select sum(actual_total) from loan_history where rep_date <= today-1
 * @param $client_id
 * @return array
 */

function loan_history_calculate_current_balance($client_id) {

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'actual_deposits')
//        ->fieldCondition('field_date', 'value', date('Y-m-d', strtotime('Yesterday')), '<=')
        ->fieldCondition('field_physical_entity', 'target_id', $client_id, '=');

    $result = $query->execute();

    $actual_deposits = array();
    $physical_entities_with_issued_loans = loan_history_get_clients_with_issued_loans();
    $field_amount_sum = 0;

    if (isset($result['node'])) {
        $actual_deposits = entity_load('node', array_keys($result['node']));
    }

    foreach($actual_deposits as $deposit) {
        $field_amount_sum += $deposit->field_amount['und'][0]['value'];
    }

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'loan_history')
//        ->fieldCondition('field_date', 'value', date('Y-m-d', strtotime('Yesterday')), '<=')
        ->fieldCondition('field_physical_entity', 'target_id', $client_id, '=');

    $result = $query->execute();

    $loan_histories =array();

    if (isset($result['node'])) {
        $loan_histories = entity_load('node', array_keys($result['node']));
    }


    foreach ($loan_histories as $history) {
        if (isset($history->field_actual_total_amount) && !empty($history->field_actual_total_amount)) {
            $field_amount_sum -= $history->field_actual_total_amount['und'][0]['value'];
        }
    }


    loan_history_insert_balance($field_amount_sum, $client_id);
}

function loan_history_insert_balance($balance, $client_id) {
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'current_balance')
        ->fieldCondition('field_physical_entity', 'target_id', $client_id, '=');

    $result = $query->execute();

    if (empty($result)) {
        $node = new stdClass();
        $node->type = 'current_balance';
        $node->title = $client_id;
        node_object_prepare($node);

        $node->language = LANGUAGE_NONE;

        $node->field_physical_entity[$node->language][] = array(
            'target_id' => $client_id,
            'target_type' => 'node',
        );

        $node->field_current_balance[$node->language] = array(
            0 => array('value' => $balance)
        );

        $node = node_submit($node);
        node_save($node);
    }else {
        $entities = $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', 'current_balance')
            ->fieldCondition('field_physical_entity', 'target_id', $client_id, '=')
            ->execute();

        if (!empty($entities['node'])) {
            $node = node_load('node', array_keys($result['node']));
            $node->field_current_balance['und'][0]['value'] = $balance;
            field_attach_update('node', $node);
        }
    }
}

function loan_history_repayments_schedule($loan_id, $issue_date) {
    $loan_statement = current(physical_entity_form_statement_get_statement_form_by_nid($loan_id));

    if (!empty($loan_statement)) {
        $principal_amount = $loan_statement->field_principal_amount['und'][0]['value'];
        $number_of_periods = $loan_statement->field_number_of_periods['und'][0]['value'];
        $annual_interest_rate = round($loan_statement->field_annual_interest_rate['und'][0]['value'], 2);
        $grace_period = $loan_statement->field_grace_period['und'][0]['value'];

        $total_amount = pmt($annual_interest_rate, $number_of_periods - $grace_period, $principal_amount);
        $balance = $principal_amount;

        for ($n = 1; $n <= $number_of_periods; $n++) {

            $node = new stdClass();
            $node->type = 'loan_history';
            $node->title = $loan_id;
            node_object_prepare($node);

            $node->language = LANGUAGE_NONE;

            $repayment_date = date("Y-m-d", strtotime("+$n month", strtotime($issue_date)));
            $interest = round(round($balance, 2) * $annual_interest_rate * 0.01 / 12, 2);

            if ($n > $grace_period) {
                $principal = round($total_amount - $interest, 2);
            }else {
                $principal = 0;
            }

            $balance -= $principal;

            $node->field_physical_entity[$node->language][] = array(
                'target_id' => $loan_statement->field_physical_entity['und'][0]['target_id'],
                'target_type' => 'node',
            );

            $node->field_physical_entity_loan[$node->language][] = array(
                'target_id' => $loan_id,
                'target_type' => 'node',
            );

            $node->field_repayment_date[$node->language] = array(
                0 => array('value' => $repayment_date)
            );

            $node->field_total_amount[$node->language] = array(
                0 => array('value' => $total_amount)
            );

            $node->field_interest_accrued[$node->language] = array(
                0 => array('value' => $interest)
            );

            $node->field_principal[$node->language] = array(
                0 => array('value' => $principal)
            );

            $node->field_balance[$node->language] = array(
                0 => array('value' => round($balance, 2))
            );

            $node = node_submit($node);
            node_save($node);
        }
    }
}


function loan_history_update_loan_history($amount_sum) {

}

function pmt($interestRate, $nper, $principal) {

    $interestRate = $interestRate * 0.01 / 12;

    $payment = $principal * $interestRate / (1 - pow((1 + $interestRate), -$nper));

    return round($payment, 2); //Round to two decimal places
}

/**
 * Get all client_ids whose loans have been issued
 *
 * @return array|bool|mixed
 */
function loan_history_get_clients_with_issued_loans() {

    $issued_status_id = physical_entity_form_statement_get_loan_status_id('Issued');

    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'physical_entity_loan')
        ->fieldCondition('field_loan_status', 'target_id', $issued_status_id, '=');

    $result = $query->execute();

    $statement_forms = array();
    $physical_entity_ids = array();

    if (isset($result['node'])) {
        $statement_forms = entity_load('node', array_keys($result['node']));
    }

    foreach ($statement_forms as $key => $form) {
        $physical_entity_ids[$key] = $form->field_physical_entity['und'][0]['target_id'];
    }

    return $physical_entity_ids;

}



