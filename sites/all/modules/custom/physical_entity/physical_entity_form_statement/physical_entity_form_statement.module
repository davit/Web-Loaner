<?php/** * Implements hook_menu(). */function physical_entity_form_statement_menu() {    $items['physical-entities/form-statements/create'] = array(        'title' => 'Create Statement Form',        'page callback' => 'physical_entity_form_statement_page',        'access callback' => TRUE,    );    return $items;}/** * Calculate accrued interest for the given loan * * @param $loan_nid * @return int */function physical_entity_form_accrued_interest($loan_nid) {    $statement_form_obj = current(physical_entity_form_statement_get_statement_form_by_nid($loan_nid));    $accrued_interest = 0;    if (!empty($statement_form_obj) && !empty($statement_form_obj->field_issue_date)) {        $annual_interest_rate = $statement_form_obj->field_annual_interest_rate['und'][0]['value'];        $issue_date = $statement_form_obj->field_issue_date['und'][0]['value'];        $principal_amount = $statement_form_obj->field_principal_amount['und'][0]['value'];        $date_diff = 0;        $daily_interest = 0;        if (!empty($statement_form_obj->field_issue_date)) {            $daily_interest = $annual_interest_rate * 0.01 / 365 * $principal_amount;            $startTimeStamp = strtotime($issue_date);            $endTimeStamp = time();            if ($endTimeStamp > $startTimeStamp) {                $timeDiff = $endTimeStamp - $startTimeStamp;                $numberDays = $timeDiff / 86400;  // 86400 seconds in one day                $date_diff = intval($numberDays);                $accrued_interest = round($date_diff * $daily_interest, 2);            }        }    }    return $accrued_interest;}/** * hook_menu() callback * * @return array|mixed */function physical_entity_form_statement_page() {    return drupal_get_form('physical_entity_form_statement_form');}/** * Implements hook_form(). * @param $form * @param $form_state * @return * @internal param $form_state */function physical_entity_form_statement_form($form, &$form_state) {    $physical_entities_obj = physical_entity_form_statement_get_physical_entities();    $physical_entities = array();    $personal_id_numbers = array();    foreach($physical_entities_obj as $physical_entity_obj) {        $physical_entities[$physical_entity_obj->nid] =            $physical_entity_obj->field_first_name['und'][0]['value'] . ' '.$physical_entity_obj->field_last_name['und'][0]['value'];        $personal_id_numbers[$physical_entity_obj->nid] = $physical_entity_obj->field_personal_id_number['und'][0]['value'];    }//    print_r($fields = field_info_instances("node", "physical_entity_loan")); exit;    $form['#prefix'] = '<div class="col-lg-4">';    $form['#suffix'] = '</div>';    $form['personal_id_number_input'] = array(        '#type' => 'textfield',        '#title' => t('Personal ID Number'),        '#maxlength' => 11,        '#default_value' => '',    );    $form['personal_id_numbers'] = array(        '#type' => 'select',        '#options' => $personal_id_numbers,//        '#required' => TRUE,        '#default_value' => '',    );    $form['physical_entity'] = array(        '#type' => 'select',        '#title' => t('Physical Entities'),        '#options' => $physical_entities,        '#required' => TRUE,        '#default_value' => '',    );    $form['principal_amount'] = array(        '#type' => 'textfield',        '#title' => t('Principal Amount'),        '#required' => TRUE,        '#default_value' => '',    );    $currency = array(        'USD' => 'USD',        'GEL' => 'GEL',    );    $form['currency'] = array(        '#type' => 'select',        '#title' => t('Currency'),        '#options' => $currency,        '#required' => TRUE,        '#default_value' => '',    );    $form['principal_amount'] = array(        '#type' => 'textfield',        '#title' => t('Principal Amount'),        '#required' => TRUE,        '#default_value' => '',    );    $annual_interest_rates = array(        '18' => 18,        '30' => 30,        'Other' => 'Other'    );    $form['annual_interest_rate'] = array(        '#type' => 'select',        '#title' => t('Annual Interest Rate'),        '#options' => $annual_interest_rates,        '#required' => TRUE,        '#default_value' => '',    );    $form['interest_rate_other'] = array(        '#type' => 'textfield',        '#title' => t('Other Interest Rate'),        '#default_value' => '',    );    $payment_period_types = array(        'Monthly' => 'Monthly'    );    $form['payment_period_type'] = array(        '#type' => 'select',        '#title' => t('Payment Period Type'),        '#options' => $payment_period_types,        '#required' => TRUE,        '#default_value' => 'Monthly',    );    $form['number_of_periods'] = array(        '#type' => 'textfield',        '#title' => t('Number of Periods'),        '#required' => TRUE,        '#default_value' => '',    );    $form['loan_number'] = array(        '#type' => 'textfield',        '#title' => t('Loan Number'),        '#value' => uniqid('#'),        '#required' => TRUE,        '#default_value' => '',    );    $form['grace_period'] = array(        '#type' => 'textfield',        '#title' => t('Grace Period'),        '#default_value' => 0,    );    $repayment_schedule_types = array(        'Discount Rate' => 'Discount Rate'    );    $form['repayment_schedule_type'] = array(        '#type' => 'select',        '#title' => t('Repayment Schedule Type'),        '#options' => $repayment_schedule_types,        '#required' => TRUE,        '#default_value' => '',    );//    foreach (module_implements('loan_form') as $module) {//        $function = $module . '_loan_form';//        $function($form);//    }    $form['submit'] = array(        '#type' => 'submit',        '#value' => t('Submit'),    );    return $form;}/** * Implements hook_form_submit() * * @param $form * @param $form_state */function physical_entity_form_statement_form_submit($form, &$form_state) {    $node = new stdClass();    $node->type = 'physical_entity_loan';    $node->title = $form_state['values']['loan_number'];    node_object_prepare($node);    $node->language = LANGUAGE_NONE;    $node->field_physical_entity[$node->language][] = array(        'target_id' => $form_state['values']['physical_entity'],        'target_type' => 'node',    );    $node->field_principal_amount[$node->language] = array(        0 => array('value' => $form_state['values']['principal_amount'])    );    $node->field_currency[$node->language] = array(        0 => array('value' => $form_state['values']['currency'])    );    $node->field_annual_interest_rate[$node->language] = array(        0 => array('value' => $form_state['values']['annual_interest_rate'])    );    $node->field_annual_interest_rate_other[$node->language] = array(        0 => array('value' => $form_state['values']['interest_rate_other'])    );    $node->field_date[$node->language] = array(        0 => array('value' => date('Y-m-d'))    );    $node->field_payment_period_type[$node->language] = array(        0 => array('value' => $form_state['values']['payment_period_type'])    );    $node->field_number_of_periods[$node->language] = array(        0 => array('value' => $form_state['values']['number_of_periods'])    );    $node->field_loan_number[$node->language] = array(        0 => array('value' => $form_state['values']['loan_number'])    );    $node->field_grace_period[$node->language] = array(        0 => array('value' => $form_state['values']['grace_period'])    );    $node->field_repayment_schedule_type[$node->language] = array(        0 => array('value' => $form_state['values']['repayment_schedule_type'])    );//    module_invoke_all('loan_node', $node, $form, $form_state);    foreach (module_implements('loan_node') as $module) {        $function = $module . '_loan_node';        $function($node, $form, $form_state);    }    $node = node_submit($node);    node_save($node);    drupal_set_message("Statement form saved successfully!");}/** * Implements hook_node_validate(). * @param $node * @param $form * @param $form_state */function physical_entity_form_statement_node_validate($node, $form, &$form_state) {    if ($node->type == 'physical_entity_loan') {        $loan_status_id = $form_state['values']['field_loan_status']['und'][0]['target_id'];        $statement_form = current(physical_entity_form_statement_get_statement_form_by_nid($node->nid));        $loan_status_id_db = $statement_form->field_loan_status['und'][0]['target_id'];        $loan_status_obj = current(physical_entity_form_statement_get_loan_status($loan_status_id));        $loan_status_db_obj = current(physical_entity_form_statement_get_loan_status($loan_status_id_db));        $form_loan_status = $loan_status_obj->field_status['und'][0]['value'];        $db_loan_status = $loan_status_db_obj->field_status['und'][0]['value'];        if ($db_loan_status == 'Issued' && $form_loan_status != $db_loan_status) {            form_set_error('field_loan_status', t("Loan has already been issued"));        }    }}/** * Implements hook_node_presave(). * @param $node */function physical_entity_form_statement_node_update($node) {    if ($node->type == 'physical_entity_loan' && isset($node->field_loan_status)) {        $loan_status_id = $node->field_loan_status['und'][0]['target_id'];        $loan_status_obj = current(physical_entity_form_statement_get_loan_status($loan_status_id));        $loan_status = $loan_status_obj->field_status['und'][0]['value'];        if ($loan_status == 'Issued') {//            $node->field_issue_date['und'][0]['value'] = date('Y-m-d');//            field_attach_update('node', $node);            loan_history_repayments_schedule($node->nid, $node->field_issue_date['und'][0]['value']);        }    }}/** * Implements hook_node_view(). * @param $node * @param $view_mode * @param $langcode */function physical_entity_form_statement_node_view($node, $view_mode, $langcode){    $accrued_interest = physical_entity_form_accrued_interest($node->nid);    $node->content['field_accrued_interest'][0]['#markup'] = $accrued_interest;}/** * @param $nid * @return array */function physical_entity_form_statement_get_statement_form_by_nid($nid) {    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'physical_entity_loan')        ->propertyCondition('nid', $nid);    $result = $query->execute();    $statement_form = array();    if (isset($result['node'])) {        $statement_form = entity_load('node', array_keys($result['node']));    }    return $statement_form;}/** * Implements hook_form_alter(). * @param $form * @param $form_state * @param $form_id */function physical_entity_form_statement_form_alter(&$form, &$form_state, $form_id){    if ($form_id == 'physical_entity_loan_node_form') {    }}/** * Get all physical entities * * @return array|bool|mixed */function physical_entity_form_statement_get_physical_entities() {    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'physical_entity');    $result = $query->execute();    $physical_entities = array();    if (isset($result['node'])) {        $physical_entities_nids = array_keys($result['node']);        $physical_entities = entity_load('node', $physical_entities_nids);    }    return $physical_entities;}/** * @param $nid * @return array */function physical_entity_form_statement_get_loan_status($nid) {    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'loan_status')        ->propertyCondition('nid', $nid);    $result = $query->execute();    $loan_status = array();    if (isset($result['node'])) {        $loan_status_nids = array_keys($result['node']);        $loan_status = entity_load('node', $loan_status_nids);    }    return $loan_status;}function physical_entity_form_statement_get_latest_issued_loan() {    $issued_nid = physical_entity_form_statement_get_loan_status_id('Issued');    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'physical_entity_loan')        ->fieldCondition('field_loan_status', 'target_id', $issued_nid, '=')        ->propertyOrderBy('created', 'DESC')        ->range(0, 1);    $result = $query->execute();    $loan = array();    if (isset($result['node'])) {        $loan_nids = array_keys($result['node']);        $loan = entity_load('node', $loan_nids);    }    return $loan;}function physical_entity_form_statement_get_issued_loans() {    $issued_nid = physical_entity_form_statement_get_loan_status_id('Issued');    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'physical_entity_loan')        ->fieldCondition('field_loan_status', 'target_id', $issued_nid, '=');    $result = $query->execute();    $loans = array();    if (isset($result['node'])) {        $loan_nids = array_keys($result['node']);        $loans = entity_load('node', $loan_nids);    }    return $loans;}function physical_entity_form_statement_get_issued_loans_by_date($date) {    $issued_nid = physical_entity_form_statement_get_loan_status_id('Issued');    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'physical_entity_loan')        ->fieldCondition('field_loan_status', 'target_id', $issued_nid, '=')        ->fieldCondition('field_issue_date', 'value', $date, '=');    $result = $query->execute();    $loans = array();    if (isset($result['node'])) {        $loan_nids = array_keys($result['node']);        $loans = entity_load('node', $loan_nids);    }    return $loans;}function physical_entity_form_statement_get_loan_status_id($status_name) {    $query = new EntityFieldQuery();    $query->entityCondition('entity_type', 'node')        ->entityCondition('bundle', 'loan_status')        ->fieldCondition('field_status', 'value', $status_name, '=');    $result = $query->execute();    $status_nid = array();    if (isset($result['node'])) {        $status_nid = array_keys($result['node']);    }    return current($status_nid);}/** * @param $loan_status * @return */function physical_entity_form_statement_get_fa_icon($loan_status) {    $loan_status_icons = [        'Pending' => 'fa fa-clock-o pending',        'Approved' => 'fa fa-check-circle approved',        'Rejected' => 'fa fa-ban rejected',        'Issued' => 'fa fa-check-circle issued',    ];    return $loan_status_icons[$loan_status];}